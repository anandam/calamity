#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'calamity_version'
require 'calamity_task'
require 'calamity_data_access'
require 'sqlite3'

include GLI

program_desc 'Calamity is a GTD life hacking tool'

version Calamity::VERSION

#desc 'Describe some switch here'
#switch [:s,:switch]

desc 'The database file location'
default_value "#{ENV['HOME']}/.calamity/calamity.db"
arg_name '<database>'
flag [:database]

desc 'Add a task'
arg_name '<task name>'
command :add do |c|
  c.desc 'The context where the task will be accomplished'
  c.default_value 'inbox'
  c.arg_name '<context>'
  c.flag [:c, :context]
  c.desc 'The project the taske contributes to'
  c.arg_name '<project>'
  c.flag [:p, :project]
  c.action do |global_options,options,args|
    task = Calamity::Task.new
    task.name = args[0]
    task.context = options[:context]
    task.project = options[:project]
    db = Calamity::DataAccess.new global_options[:database]
    db.add_task task
    # Your command logic here
     
    # If you have any errors, just raise them
    # raise "that command made no sense"
  end
end

desc 'List all tasks'
command :list do |c|
  c.action do |global_options,options,args|
    db = Calamity::DataAccess.new global_options[:database]
    tasks = db.list_tasks
    puts "#{'Task Name'.center(30)}#{'Context'.center(30)}#{'Project'.center(30)}"
    tasks.each do |t|
      puts "#{t.name.center(30) if t.name}       #{t.context.center(30) if t.context}         #{t.project.center(30) if t.project}"
    end  
  end
end

desc 'Mark a task or tasks as finished'
arg_name 'The name of the task(s) to mark finished, separated by a space'
command :finish do |c|
  c.action do |global_options,options,args|
    db = Calamity::DataAccess.new global_options[:database]
    args.each do |a|    
      db.mark_finished a
    end
  end
end

pre do |global,command,options,args|
  Dir.mkdir("#{ENV['HOME']}/.calamity") if !Dir.entries("#{ENV['HOME']}").include?('.calamity');
  true
end

post do |global,command,options,args|
end

on_error do |exception|
  true
end

exit GLI.run(ARGV)
